<?php
/**
 * Script for queries GitHub.com users for all german cities.
 */

// This file is generated by Composer
require_once 'vendor/autoload.php';

// This is the project configuration
require_once("config.php");
if (!defined("DEBUG"))
  exit("Error: Configuration constants not found...\n");

// Initialize the Mongo
try {
  $conn = new MongoClient();
  $db = $conn->github;
  $users = $db->users;
  $cityCounts = $db->cityCounts;

  $users->remove(array());
  $users->ensureIndex(array("id" => 1), array('unique' => true));
  $cityCounts->ensureIndex(array("city" => 1), array('unique' => true));

  // How many results found
  $num_users = $users->find()->count();
  echo "There are ". $num_users ." in the collection.\n";
} catch ( MongoConnectionException $e ) {
  exit("Couldn't connect to mongodb, is the \"mongo\" process running?");
} catch (MongoException $e) {
  exit($e->getMessage());
}

// Create a new GitHub client
$github = new \Github\Client();
$paginator  = new Github\ResultPager( $github );
$searchApi = $github->api('search');
$searchApi->setPerPage(100);


// Check if authentication info is available
if (defined("AUTH_USER") && defined ("AUTH_PW")) {
  echo "Authenticating the GitHub API client...\n";
  $github->authenticate(AUTH_USER, AUTH_PW, Github\Client::AUTH_HTTP_PASSWORD);
}

// Let's see how many requests we can do
$rateLimits = $github->api('rate_limit')->getRateLimits();
if ($rateLimits["rate"]["remaining"] > 0) {
  echo("There are still ". $rateLimits["rate"]["remaining"] . "/" .
    $rateLimits["rate"]["limit"] . " remaining requests.\n");
} else {
  $datetime = date(DateTime::ISO8601, $rateLimits["rate"]["reset"]);
  echo("Error: The GitHub rate limit was reached.\n");
  exit("Limits will be reset at ". $datetime ."\n");
}

/**
 * Start the work :)
 */
 $json_file_content = file_get_contents(CITIES_JSON);

 // The input file (countriesToCities) is encoded in UTF-16.
 // However, json_decode only works with UTF-8.
 // Hence, first convert the content.
 // $content_utf8 = mb_convert_encoding($json_file_content, 'UTF-8', 'UTF-16');
 $content_utf8 = $json_file_content;
 $countriesToCities = json_decode($content_utf8, true);

// Use the GutHub Api to retrieve users from every city.
foreach ($countriesToCities[COUNTRY] as $city) {
    $query = array("location:".$city, 'followers');
    if (!continueSearch($github)) waitUntil($github);
    $r = $paginator->fetch($searchApi, 'users', $query);
    echo ("We've found ". $r["total_count"] ." users for ". $city .".\n");

    try {
      $cityCounts->insert(array('city' => $city, 'num_users' => $r["total_count"]));
      // while ($paginator->hasNext()) {
        if (!empty($r["items"])) {
            echo "Inserting ". count($r["items"]) ." users from ". $city . ".\n";
            $users->batchInsert($r["items"]);
        }
        // if (!continueSearch($github)) waitUntil($github);
        // $r = $paginator->fetchNext();
      // }
   }
   catch (MongoException $e) {
     echo $e->getMessage() . "\n";
   }
}

// Close the connection to MongoDB
$conn->close();

function continueSearch($client) {
  $limit = $client->api('rate_limit')->getRateLimits();
  return ($limit["resources"]["search"]["remaining"] > 0);
}

function waitUntil($client) {
  $limit = $client->api('rate_limit')->getRateLimits();
  $timestamp = $limit["resources"]["search"]["reset"] + 10;
  $datetime = date(DateTime::ISO8601, $timestamp);
  echo("Error: The GitHub rate limit was reached.\n");
  echo("Waiting until ". $datetime ."\n");
  time_sleep_until($timestamp);
}
