<?php
/*
 * (C) Copyright 2015 Jerome Meinke and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *   Jerome Meinke, Freiburg, https://github.com/jmeinke
 */

// This file is generated by Composer
require_once 'vendor/autoload.php';

require_once("config.php");
if (!defined("DEBUG"))
  exit("Error: Configuration constants not found...\n");

try {
  // Initialize the MongoDB connection
  $conn = new MongoClient();
  $db = $conn->github;

  $cityCoords = $db->cityCoords;
  $users = $db->users;
  $users->createIndex(array("id" => 1), array('unique' => true));

  if (DEBUG) {
    echo("All user entries are being removed...");
    $users->remove(array());
    echo("done.\n");
  }

  // How many cities found
  $num_cities = $cityCoords->find()->count();
  echo "There are ". $num_cities ." cities in the collection.\n";
} catch ( MongoConnectionException $e ) {
  exit("Couldn't connect to mongodb, is the \"mongo\" process running?");
} catch (MongoException $e) {
  exit($e->getMessage());
}

// Create a new GitHub client
$github = new \Github\Client();
$paginator  = new Github\ResultPager($github);
$searchApi = $github->api('search');
$searchApi->setPerPage(100);

// Check if authentication info is available
if (defined("AUTH_USER") && defined ("AUTH_PW")) {
  echo "Authenticating the GitHub API client...\n";
  $github->authenticate(AUTH_USER, AUTH_PW, Github\Client::AUTH_HTTP_PASSWORD);
}

// Let's see how many requests we can do
$rateLimits = $github->api('rate_limit')->getRateLimits();
if ($rateLimits["rate"]["remaining"] > 0) {
  echo("There are still ". $rateLimits["rate"]["remaining"] . "/" .
    $rateLimits["rate"]["limit"] . " remaining requests.\n");
} else {
  $datetime = date(DateTime::ISO8601, $rateLimits["rate"]["reset"]);
  echo("Error: The GitHub rate limit was reached.\n");
  exit("Limits will be reset at ". $datetime ."\n");
}

// Use the GutHub Api to retrieve users from every city.
foreach ($cityCoords->find() as $city) {
    $query = array("location:".$city['city'], 'followers', 'desc');
    if (!continueSearch($github)) waitUntil($github);
    $r = $paginator->fetch($searchApi, 'users', $query);
    echo ("We've found ". $r["total_count"] ." users for ". $city['city_ascii'] .".\n");

    try {
      $total_count = array('$set' => array("gh_total_count" => $r["total_count"]));
      $cityCoords->update(array("city_ascii" => $city['city_ascii']), $total_count);
      // while ($paginator->hasNext()) {
        if (!empty($r["items"])) {
            echo "Inserting ". count($r["items"]) ." users from ". $city['city_ascii'] . ".\n";
            $city_users = array('$set' => array("gh_users" => $r["items"]));
            $cityCoords->update(array("city_ascii" => $city['city_ascii']), $city_users);
        }
        // if (!continueSearch($github)) waitUntil($github);
        // $r = $paginator->fetchNext();
      // }
   }
   catch (MongoException $e) {
     echo $e->getMessage() . "\n";
   }
}

// Close the connection to MongoDB
$conn->close();

function continueSearch($client) {
  $limit = $client->api('rate_limit')->getRateLimits();
  return ($limit["resources"]["search"]["remaining"] > 0);
}

function waitUntil($client) {
  $limit = $client->api('rate_limit')->getRateLimits();
  $timestamp = $limit["resources"]["search"]["reset"] + 2;
  $datetime = date(DateTime::ISO8601, $timestamp);
  echo("Error: The GitHub rate limit was reached.\n");
  echo("Waiting until ". $datetime ."\n");
  time_sleep_until($timestamp);
}
